# .github/workflows/deploy.yml
name: Deploy HTML App with Terraform, Ansible, and Docker
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy:
    name: Deploy with Terraform and Ansible
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

# #from here to vm deploy steps--------------------------
#       # Set up Terraform
#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.3.0

#       # Initialize Terraform
#       - name: Initialize Terraform
#         run: terraform init
#         working-directory: terraform

#        # Terraform Plan
#       - name: Terraform Plan
#         run: terraform plan -out=tfplan
#         working-directory: terraform

#       # Terraform Apply
#       - name: Terraform Apply
#         if: github.ref == 'refs/heads/main'
#         run: terraform apply -auto-approve tfplan
#         working-directory: terraform

#       #   # upto this stage 1------------------------------------

#       # from here the 2nd stage 

#       #installing dependent libraries
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

        

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible==6.3.0  # Using a specific older version for better compatibility
          sudo apt-get update
          sudo apt-get install -y openssh-client

# from here to connet vm to install docker to enable the service
      - name: Setup SSH
        run: |
          eval $(ssh-agent -s)
          chmod 600 network-vm.pem
          ssh-add network-vm.pem
          mkdir -p ~/.ssh
          echo "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n\tServerAliveInterval 60\n\tServerAliveCountMax 3" > ~/.ssh/config

      - name: Verify SSH Connection
        run: |
          ssh -i network-vm.pem -o StrictHostKeyChecking=no azureuser@13.83.80.14 'echo "Connection successful"'
    
      - name: Install Python on Remote
        run: |
          ssh -i network-vm.pem azureuser@13.83.80.14 '
          if ! command -v python3 &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y python3 python3-pip
          fi'

      - name: Run Ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
          ANSIBLE_SSH_RETRIES: "5"
          ANSIBLE_RETRY_FILES_ENABLED: "True"
        run: |
          ansible-playbook -i inventory.ini playbook.yml -vvv

     

    
